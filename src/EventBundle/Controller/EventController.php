<?php

namespace EventBundle\Controller;

use Acme\DemoLib\Class_With_Underscores;
use EventBundle\Entity\Event;
use EventBundle\Repository\EventRepository;
use Knp\Component\Pager\PaginatorInterface;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use UserBundle\Entity\User;

/**
 * Event controller.
 *
 */
class EventController extends Controller
{

    /**
     * Lists all event entities.
     *
     */
    public function indexAction(Request $request)
    {

        $em = $this->getDoctrine()->getManager();

        $events = $em->getRepository('EventBundle:Event')->findAll();
        $dql = "Select bp FROM EventBundle:Event bp";
        $query = $em->createQuery($dql);
        $eventsPagniate  = $this->get('knp_paginator')->paginate(
            $query,
            $request->query->get('page', 1)/*le numéro de la page à afficher*/,
            2/*nbre d'éléments par page*/
        );

        return $this->render('@Event/event/index.html.twig', array(
            'events' => $eventsPagniate,
        ));
    }

    public function myEventsAction()
    {
        $em = $this->getDoctrine()->getManager();

        $events = $em->getRepository('EventBundle:Event')->findAll();

        $myEvents = array();

        foreach($events as $event)
        {
            if ($event->getUser()->getId() == $this->getUser()->getId())
            {
                $myEvents[] = $event;
            }
        }

        return $this->render('@Event/event/myevents.html.twig', array(
            'events' => $myEvents,
        ));
    }

    /**
     * Creates a new event entity.
     *
     */
    public function newAction(Request $request)
    {
        $event = new Event();
        $form = $this->createForm('EventBundle\Form\EventType', $event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /**
             * @var UploadedFile $file
             */
            $file=$event->getPicture();
            $picture = $request->get('imageUpload');
            //dump($picture);die;
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('images_directory'),$filename);
            $event->setPicture($filename);
            $event->setState('pending');
            $em = $this->getDoctrine()->getManager();
            $em->persist($event);
            $em->flush();

            return $this->redirectToRoute('event_backOffice');
        }

        return $this->render('@Event/event/new.html.twig', array(
            'event' => $event,
            'form' => $form->createView(),
        ));
    }

    public function participerAction($id)
    {
        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository(Event::class)->find($id);

        if($event->getNbPlace()>0){
            if (in_array($this->getUser(),$event->getParticipants()->toArray())) {
                return $this->render('ManagementServiceBundle:School:affect_user_to_school.html.twig', array(
                    "msg"=>"deja inscrit dans cet evenement"

                ));
            }
            $event->setNbPlace($event->getNbPlace() -1 );
            $event->addParticipant($this->getUser());
            $em->flush();
            return $this->redirectToRoute('event_index');
        }else{
            return $this->render('ManagementServiceBundle:School:affect_user_to_school.html.twig', array(
                "msg"=>"pas de place restante"

            ));
        }
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function getParticipentsAction($id)
    {
        $em=$this->getDoctrine()->getManager();
        $event=$em->getRepository(Event::class)->find($id);
        var_dump(count($event->getParticipants()));
        return $this->render('@Event/event/event_users.html.twig', array(
        'users'=>$event->getParticipants()
        ));
    }
    /**
     * Finds and displays a event entity.
     *
     */
    public function showAction(Event $event )
    {
        $deleteForm = $this->createDeleteForm($event);
        return $this->render('@Event/event/show.html.twig', array(
            'event' => $event,
        ));
    }

    public function showAdminAction()
    {
        $em = $this->getDoctrine()->getManager();

        $events = $em->getRepository('EventBundle:Event')->findAll();

        return $this->render('@Event/event/indexAdmin.html.twig', array(
            'events' => $events,
        ));

    }

    /**
     * Displays a form to edit an existing event entity.
     *
     */
    public function editAction(Request $request, Event $event)
    {
        $deleteForm = $this->createDeleteForm($event);
        $editForm = $this->createForm('EventBundle\Form\EventType', $event);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('event_backOffice');
        }

        return $this->render('@Event/event/edit.html.twig', array(
            'event' => $event,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a event entity.
     *
     */
    public function deleteAction(Request $request, Event $event)
    {
            $em = $this->getDoctrine()->getManager();
            $em->remove($event);
            $em->flush();

        return $this->redirectToRoute('event_backOffice');
    }

    /**
     * Creates a form to delete a event entity.
     *
     * @param Event $event The event entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Event $event)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('event_delete', array('id' => $event->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }

    public function searchAction(Request $request)
    {
       $events          =   $this->getDoctrine()->getRepository(Event::class)->findAll();
       $titre           =   $request->get('titre');
       $lieu            =   $request->get('lieu');
       $eventsResult     =   array();

       if(($titre != null) && ($lieu == null))
       {
          foreach($events as $event)
          {
              if(strpos(strtoupper($event->getTitle()) , strtoupper($titre))!== false )
              {
                  $eventsResult[] = $event;
              }
          }
       }
       else if (($titre == null) && ($lieu != null))
       {
           foreach($events as $event)
           {
               if(strpos(strtoupper($event->getLocation()) , strtoupper($lieu))!== false )
               {
                   $eventsResult[] = $event;
               }
           }
       }
       else if (($titre != null) && ($lieu != null))
       {
           foreach($events as $event)
           {
               if((strpos(strtoupper($event->getTitle()) , strtoupper($titre))!== false ) && (strpos(strtoupper($event->getLocation()) , strtoupper($lieu))!== false ))
               {
                   $eventsResult[] = $event;
               }
           }
       }
       else
       {
           $eventsResult = $events;
       }

        return $this->render('@Event/event/search.html.twig',[
            'events'        =>  $eventsResult,
        ]);
    }

    public function searchMyEventsAction(Request $request)
    {
        $events             =   $this->getDoctrine()->getRepository(Event::class)->findAll();
        $myEvents           =  array();
        $titre              =   $request->get('titre');
        $lieu               =   $request->get('lieu');
        $eventsResult       =   array();

        foreach($events as $event)
        {
            if ($event->getUser()->getId() == $this->getUser()->getId())
            {
                $myEvents[] = $event;
            }
        }

        if(($titre != null) && ($lieu == null))
        {
            foreach($myEvents as $event)
            {
                if(strpos(strtoupper($event->getTitle()) , strtoupper($titre))!== false )
                {
                    $eventsResult[] = $event;
                }
            }
        }
        else if (($titre == null) && ($lieu != null))
        {
            foreach($myEvents as $event)
            {
                if(strpos(strtoupper($event->getLocation()) , strtoupper($lieu))!== false )
                {
                    $eventsResult[] = $event;
                }
            }
        }
        else if (($titre != null) && ($lieu != null))
        {
            foreach($myEvents as $event)
            {
                if((strpos(strtoupper($event->getTitle()) , strtoupper($titre))!== false ) && (strpos(strtoupper($event->getLocation()) , strtoupper($lieu))!== false ))
                {
                    $eventsResult[] = $event;
                }
            }
        }
        else
        {
            $eventsResult = $myEvents;
        }

        return $this->render('@Event/event/search_my_events.html.twig',[
            'events'        =>  $eventsResult,
        ]);
    }
}
